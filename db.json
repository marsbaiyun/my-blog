{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material-icons.css","path":"css/material-icons.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-segmentfault.svg","path":"img/footer/footer_ico-segmentfault.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1533554460184},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1533554460185},{"_id":"themes/material/.npmignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1533554460185},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1533126194000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1533126194000},{"_id":"themes/material/README.md","hash":"e50bd84c62bdf8ee9035c534b560cb9a682a3c11","modified":1533126194000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1533126194000},{"_id":"themes/material/_config.yml","hash":"8577120a210a5c0684172fb9ce7dc998f62512f7","modified":1534752586863},{"_id":"themes/material/_config.template.yml","hash":"5bdee99a74a2f5b1927b55b6a4fdb6a82f47dbc1","modified":1533126194000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1533126194000},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1533126194000},{"_id":"themes/material/package.json","hash":"35274ddcf345997103e83f33a80fc036c74e4ee5","modified":1533126194000},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1533554460185},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1533554460185},{"_id":"source/_posts/leet-code-刷题.md","hash":"d8442492ce49cfe64620263f96c99ab0110ea542","modified":1534850105379},{"_id":"source/_posts/时间慌.md","hash":"30f9511f5be32039d44c89d7f89f35ca130a2d65","modified":1534834441120},{"_id":"themes/material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1533126194000},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1533126194000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1533126194000},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1533126194000},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1533126194000},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1533126194000},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1533126194000},{"_id":"themes/material/layout/layout.ejs","hash":"ea811e2dc752e131a18dd999f2f1f4addb4b48bb","modified":1533126194000},{"_id":"themes/material/layout/index.ejs","hash":"a2b586b5bacd595360ddf29c11ef0a2998a01935","modified":1533126194000},{"_id":"themes/material/languages/ko.yml","hash":"97526bf1fe67dc3fe50b20a64f94bac0d3dba673","modified":1533126194000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1533126194000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1533126194000},{"_id":"themes/material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1533126194000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1533126194000},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1533126194000},{"_id":"themes/material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1533126194000},{"_id":"themes/material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1533126194000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533126194000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533126194000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1533126194000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1533126194000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1533126194000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1533126194000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1533126194000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1533126194000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"f1439e7c22378c45ebfd9c04101e7511153699a3","modified":1533126194000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1533126194000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1533126194000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1533126194000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"65c1ee9c6faef3d630564cabdb3278c94602b3d7","modified":1533126194000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"e9633d1112d8369251b6c82f9c44b4231b813df9","modified":1533126194000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"6cb3de048e08ece3d280d36c4e06766aa6266eb1","modified":1533126194000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1533126194000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1533126194000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1533126194000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"1638830cae8039c1979f3ae6783de9061380b9a5","modified":1533126194000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1533126194000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1533126194000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1533126194000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1533126194000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1533126194000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1533126194000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1533126194000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1533126194000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1533126194000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1533126194000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1533126194000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1533126194000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1533126194000},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"a6950132a5b3c073c9679645b93413a5ac7adb51","modified":1533126194000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1533126194000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1533126194000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1533126194000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1533126194000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1533126194000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"6331adcfad97d49e1820e42dc12a6f402c8b9c81","modified":1533126194000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1533126194000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1533126194000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1533126194000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1533126194000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1533126194000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1533126194000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1533126194000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1533126194000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1533126194000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1533126194000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1533126194000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1533126194000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1533126194000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1533126194000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1533126194000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1533126194000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533126194000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1533126194000},{"_id":"themes/material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1533126194000},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1533126194000},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1533126194000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1533126194000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1533126194000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1533126194000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1533126194000},{"_id":"themes/material/source/img/avatar.png","hash":"960ed91438b0d153a88f407a97a40affcd24f275","modified":1533639910000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1533126194000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1533126194000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1533126194000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1533126194000},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1533126194000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1533126194000},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1533126194000},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1533126194000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1533126194000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1533126194000},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1533126194000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1533126194000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1533126194000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1533126194000},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1533126194000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1533126194000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1533126194000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1533126194000},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1533126194000},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1533126194000},{"_id":"themes/material/source/css/style.min.css","hash":"feec7397cdef3776701505bc2afe6df3291ece5a","modified":1533126194000},{"_id":"themes/material/source/css/style.css","hash":"a499a32b44c86c63e1d848ea6a0b4f3d89f52e73","modified":1533126194000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1533126194000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533126194000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533126194000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1533126194000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1533126194000},{"_id":"themes/material/source/js/js.js","hash":"d919314cdfe92664462d67738ff9f4aaad0afb8c","modified":1533126194000},{"_id":"themes/material/source/js/js.min.js","hash":"ad613dad94f0e82e5c4ed179de43de2ac709143c","modified":1533126194000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1533126194000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1533126194000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1533126194000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1533126194000},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1533126194000},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1533126194000},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1533126194000},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1533126194000},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1533126194000},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1533126194000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1533126194000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533126194000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533126194000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1533126194000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-segmentfault.svg","hash":"f6c667cff0c57095ce01b7adb4f18b3c92dc060b","modified":1533126194000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1533126194000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1533126194000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1533126194000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1533126194000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1533126194000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1533126194000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1533126194000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1533126194000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1533126194000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1533126194000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1533126194000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1533126194000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533126194000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1533126194000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1533126194000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1533126194000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1533126194000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1533126194000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1533126194000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1533126194000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1533126194000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1533126194000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"d0307598380be2ce0126cadd451a4a907184e488","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"04c41da0bf670272d440df61791e63e664f9b689","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/wildfire/common.ejs","hash":"c43dabb52245d1d39e20882a42e0cd30d0abfe76","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/wildfire/enter.ejs","hash":"492927e61fa1dda0dcc97f0bb74bad533ca9f7ec","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/wildfire/main.ejs","hash":"cd6a1e3f71f552c2412f6dbe41c08042625180e6","modified":1533126194000},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1533126194000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1533126194000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1533126194000}],"Category":[{"name":"学习","_id":"cjtqtl3ji0002o4sa4e04botg"},{"name":"生活","_id":"cjtqtl3jm0004o4sanfbtrrsj"}],"Data":[],"Page":[],"Post":[{"date":"2018-08-21T08:39:57.000Z","title":"leet code 刷题","toc":true,"mathjax":true,"_content":"\n### 1.两数之和(Two Sum)\n\n给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n**示例**\n    \n    给定 nums = [2, 7, 11, 15], target = 9\n    \n    因为 nums[0] + nums[1] = 2 + 7 = 9\n    所以返回 [0, 1]\n    \n\n**我的解法**\n\n    \n    class Solution {\n        public int[] twoSum(int[] nums, int target) {\n            int[] result = null;\n            for(int i = 0;i < nums.length;i ++){\n                if(result != null && result.length == 2){\n                    break;\n                }\n                for(int j = 0;j < nums.length;j ++) {\n                    if(j == i){\n                        continue;\n                    }\n                    if((nums[i] + nums[j]) == target){\n                        result = new int[]{i, j};\n                        break;\n                    }\n                }\n            }\n            return result;\n        }\n    }\n    \n**优解**\n    \n遍历一次，在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n\n**复杂度分析**\n\n时间复杂度：$O(n)$， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费$O(1)$的时间。\n\n空间复杂度：$O(n)$， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。\n\n\n***\n### 2. 两数相加(Add Two Numbers)\n\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n**示例**\n\n    输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n    输出：7 -> 0 -> 8\n    原因：342 + 465 = 807\n\n**我的解法**\n    \n    /**\n     * Definition for singly-linked list.\n     * public class ListNode {\n     *     int val;\n     *     ListNode next;\n     *     ListNode(int x) { val = x; }\n     * }\n     */\n    class Solution {\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n            ListNode resultNode = null;\n            ListNode tmpNode = null;\n            int sum = 0;\n            int tmp;\n            do {\n                if(l1 != null){\n                    sum += l1.val;\n                    l1 = l1.next;\n                }\n                if(l2 != null){\n                    sum += l2.val;\n                    l2 = l2.next;\n                }\n                ListNode nextNode = new ListNode(sum%10);\n                tmp = sum/10;\n                sum = tmp;\n                if(tmpNode == null){\n                    resultNode = nextNode;\n                }else {\n                    tmpNode.next = nextNode;\n                }\n                tmpNode = nextNode;\n            }\n            while (l1 != null || l2 != null);\n            if(tmp != 0){\n                tmpNode.next = new ListNode(tmp);\n            }\n            return resultNode;\n        }\n    }\n    \n**优解**\n    \n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode p = l1, q = l2, curr = dummyHead;\n        int carry = 0;\n        while (p != null || q != null) {\n            int x = (p != null) ? p.val : 0;\n            int y = (q != null) ? q.val : 0;\n            int sum = carry + x + y;\n            carry = sum / 10;\n            curr.next = new ListNode(sum % 10);\n            curr = curr.next;\n            if (p != null) p = p.next;\n            if (q != null) q = q.next;\n        }\n        if (carry > 0) {\n            curr.next = new ListNode(carry);\n        }\n        return dummyHead.next;\n    }\n\n**复杂度分析**\n\n时间复杂度：$O(\\max(m, n))$，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复 $\\max(m, n)$ 次。\n\n空间复杂度：$O(\\max(m, n))$， 新列表的长度最多为 $\\max(m,n)$。\n\n***\n\n### 3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)\n\n给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n**示例 1**\n\n    输入: \"abcabcbb\"\n    输出: 3 \n    解释: 无重复字符的最长子串是 \"abc\"，其长度为 3。\n    \n**示例 2**\n\n    输入: \"bbbbb\"\n    输出: 1\n    解释: 无重复字符的最长子串是 \"b\"，其长度为 1。\n    \n**示例 3**\n\n    输入: \"pwwkew\"\n    输出: 3\n    解释: 无重复字符的最长子串是 \"wke\"，其长度为 3。\n         请注意，答案必须是一个子串，\"pwke\" 是一个子序列 而不是子串。\n         \n> 这道题想了半个小时除了暴力遍历法没有想到别的思路遂放弃\n\n**推荐解决方案**\n**滑动窗口**\n**算法**\n\n在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引$i$到$j - 1$之间的子字符串$s_{ij}$已经被检查为没有重复字符。\n我们只需要检查$s[j]$对应的字符是否已经存在于子字符串$s_{ij}$中。\n\n要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为$O(n^2)$的算法，但我们可以做得更好。\n\n通过使用 ``HashSet`` 作为滑动窗口，我们可以用$O(1)$的时间来完成对字符是否在当前的子字符串中的检查。\n\n滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 $[i, j)$（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 $[i, j)$ 向右滑动 11 个元素，则它将变为 $[i+1, j+1)$（左闭，右开）。\n\n回到我们的问题，我们使用 ``HashSet`` 将字符存储在当前窗口 $[i, j)$（最初 j = ij=i）中。 然后我们向右侧滑动索引 j，如果它不在 ``HashSet`` 中，我们会继续滑动 j。直到 $s[j]$ 已经存在于 ``HashSet`` 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 i 这样做，就可以得到答案。\n\n    public class Solution {\n        public int lengthOfLongestSubstring(String s) {\n            int n = s.length();\n            Set<Character> set = new HashSet<>();\n            int ans = 0, i = 0, j = 0;\n            while (i < n && j < n) {\n                // try to extend the range [i, j]\n                if (!set.contains(s.charAt(j))){\n                    set.add(s.charAt(j++));\n                    ans = Math.max(ans, j - i);\n                }\n                else {\n                    set.remove(s.charAt(i++));\n                }\n            }\n            return ans;\n        }\n    }\n\n**复杂度分析**\n\n* 时间复杂度：$O(2n) = O(n)$，在最糟糕的情况下，每个字符将被 i 和 j 访问两次。\n\n* 空间复杂度：$O(min(m, n))$，与之前的方法相同。滑动窗口法需要 $O(k)$ 的空间，其中 k 表示 ``Set`` 的大小。而Set的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。 \n\n**优化的滑动窗口**\n**算法**\n\n上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。\n\n也就是说，如果 $s[j]$ 在 $[i, j)$ 范围内有与 $j'$重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 $[𝑖，𝑗′]$ 范围内的所有元素，并将 i 变为 $j' + 1$。\n\n    public class Solution {\n        public int lengthOfLongestSubstring(String s) {\n            int n = s.length(), ans = 0;\n            Map<Character, Integer> map = new HashMap<>(); // current index of character\n            // try to extend the range [i, j]\n            for (int j = 0, i = 0; j < n; j++) {\n                if (map.containsKey(s.charAt(j))) {\n                    i = Math.max(map.get(s.charAt(j)), i);\n                }\n                ans = Math.max(ans, j - i + 1);\n                map.put(s.charAt(j), j + 1);\n            }\n            return ans;\n        }\n    }\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，索引 j 将会迭代 n 次。\n\n* 空间复杂度（``HashMap``）：$O(min(m, n))$，与之前的方法相同。\n\n***\n\n### 题目二 - 输入有序数组\n\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n\n***说明:***\n\n* 返回的下标值（index1 和 index2）不是从零开始的。\n* 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n***示例:***\n    \n    输入: numbers = [2, 7, 11, 15], target = 9\n    输出: [1,2]\n    解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n    \n\n#### 我的解法：\n\n    \n    class Solution {\n        public int[] twoSum(int[] numbers, int target) {\n            Map<Integer, Integer> map = new HashMap<>();\n            for(int i = 0;i < numbers.length;i ++){\n                int tmp = target - numbers[i];\n                if(map.containsKey(tmp) && map.get(tmp) < i){\n                    return new int[]{map.get(tmp)+1, i+1};\n                }\n                map.put(numbers[i], i);\n            }\n            return null;\n        }\n    }\n    \n\n#### 耗时最短的解法：\n    \n    class Solution {\n        public int[] twoSum(int[] numbers, int target) {\n            int[] result=new int[2];\n            int i,j;\n            for(i=0,j=numbers.length-1;i<j;)\n            {\n                if(numbers[i]+numbers[j]>target){\n                    j--;\n                }else if(numbers[i]+numbers[j]<target){\n                    i++;\n                }else break;\n            }\n            result[0]=i+1;\n            result[1]=j+1;\n            return result;\n        }\n    }\n    \n***\n\n### 7.反转整数(Reverse Integer)\n\n给定一个 32 位有符号整数，将整数中的数字进行反转。\n\n**示例 1:**\n    \n    输入: 123\n    输出: 321\n    \n**示例 2:**\n    \n    输入: -123\n    输出: -321\n    \n**示例 3:**\n    \n    输入: 120\n    输出: 21\n    \n***注意:***\n\n假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。\n\n#### 我的解法：\n    \n    class Solution {\n        public int reverse(int x) {\n            StringBuilder sb = new StringBuilder(\"\");\n            String str = x+\"\";\n            if(x < 0){\n                sb.append(\"-\");\n                str = str.substring(1);\n            }\n            for(int i = str.length()-1;i >=0;i--){\n                if(i == str.length()-1 && i !=0 && String.valueOf(str.charAt(i)).equals(\"0\")){\n                    continue;\n                }\n                sb.append(str.charAt(i));\n            }\n            Integer i = null;\n            try {\n                i = Integer.valueOf(sb.toString());\n            } catch (NumberFormatException e) {\n                return 0;\n            }\n    \n            return i.intValue();\n        }\n    }\n    \n#### 耗时最短的解法：\n    \n    class Solution {\n        public int reverse(int x) {\n            int next = x;\n            /*\n             pop:反转数——余数\n              */\n            int pop = 0;\n            int result = 0;\n            do {\n                pop = next % 10;\n                next /= 10;\n                // 判断是否溢出\n    \n                // MIN: -2147483648\n                if (result < Integer.MIN_VALUE / 10 || result * 10 == Integer.MAX_VALUE && pop < -8) {\n                    return 0;\n                }\n                // MAX:  2147483647\n                if (result > Integer.MAX_VALUE /10 || result * 10 == Integer.MAX_VALUE && pop > 7) {\n                    return 0;\n                }\n                result = result * 10 + pop;\n            }\n            while (next != 0);\n            return result;\n        }\n    }\n    \n***\n\n### 9.回文数(Palindrome Number)\n\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n***示例 1:***\n\n    输入: 121\n    输出: true\n\n***示例 2:***\n\n    输入: -121\n    输出: false\n    解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\n***示例 3:***\n\n    输入: 10\n    输出: false\n    解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n***示例:***\n    \n  给定 nums = [2, 7, 11, 15], target = 9\n  \n  因为 nums[0] + nums[1] = 2 + 7 = 9\n  所以返回 [0, 1]\n    \n***进阶:***\n\n你能不将整数转为字符串来解决这个问题吗？\n\n#### 我的解法：\n\n    \n    class Solution {\n        public boolean isPalindrome(int x) {\n            if(x < 0 || String.valueOf(x).equals(\"-0\")){\n                return false;\n            }\n            String str = String.valueOf(x);\n            int i,j;\n            for(i = 0,j = str.length()-1;i <= j;){\n                if(str.charAt(i) == str.charAt(j)){\n                    i++;\n                    j--;\n                }else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n[官方解决方法](https://leetcode-cn.com/articles/palindrome-number/)\n\n***","source":"_posts/leet-code-刷题.md","raw":"---\ndate: 2018-08-21 16:39:57\ntitle: leet code 刷题\ntags: [技术,算法,简单]\ncategory: 学习\ntoc: true\nmathjax: true\n---\n\n### 1.两数之和(Two Sum)\n\n给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n**示例**\n    \n    给定 nums = [2, 7, 11, 15], target = 9\n    \n    因为 nums[0] + nums[1] = 2 + 7 = 9\n    所以返回 [0, 1]\n    \n\n**我的解法**\n\n    \n    class Solution {\n        public int[] twoSum(int[] nums, int target) {\n            int[] result = null;\n            for(int i = 0;i < nums.length;i ++){\n                if(result != null && result.length == 2){\n                    break;\n                }\n                for(int j = 0;j < nums.length;j ++) {\n                    if(j == i){\n                        continue;\n                    }\n                    if((nums[i] + nums[j]) == target){\n                        result = new int[]{i, j};\n                        break;\n                    }\n                }\n            }\n            return result;\n        }\n    }\n    \n**优解**\n    \n遍历一次，在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n\n**复杂度分析**\n\n时间复杂度：$O(n)$， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费$O(1)$的时间。\n\n空间复杂度：$O(n)$， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。\n\n\n***\n### 2. 两数相加(Add Two Numbers)\n\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n**示例**\n\n    输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n    输出：7 -> 0 -> 8\n    原因：342 + 465 = 807\n\n**我的解法**\n    \n    /**\n     * Definition for singly-linked list.\n     * public class ListNode {\n     *     int val;\n     *     ListNode next;\n     *     ListNode(int x) { val = x; }\n     * }\n     */\n    class Solution {\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n            ListNode resultNode = null;\n            ListNode tmpNode = null;\n            int sum = 0;\n            int tmp;\n            do {\n                if(l1 != null){\n                    sum += l1.val;\n                    l1 = l1.next;\n                }\n                if(l2 != null){\n                    sum += l2.val;\n                    l2 = l2.next;\n                }\n                ListNode nextNode = new ListNode(sum%10);\n                tmp = sum/10;\n                sum = tmp;\n                if(tmpNode == null){\n                    resultNode = nextNode;\n                }else {\n                    tmpNode.next = nextNode;\n                }\n                tmpNode = nextNode;\n            }\n            while (l1 != null || l2 != null);\n            if(tmp != 0){\n                tmpNode.next = new ListNode(tmp);\n            }\n            return resultNode;\n        }\n    }\n    \n**优解**\n    \n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode p = l1, q = l2, curr = dummyHead;\n        int carry = 0;\n        while (p != null || q != null) {\n            int x = (p != null) ? p.val : 0;\n            int y = (q != null) ? q.val : 0;\n            int sum = carry + x + y;\n            carry = sum / 10;\n            curr.next = new ListNode(sum % 10);\n            curr = curr.next;\n            if (p != null) p = p.next;\n            if (q != null) q = q.next;\n        }\n        if (carry > 0) {\n            curr.next = new ListNode(carry);\n        }\n        return dummyHead.next;\n    }\n\n**复杂度分析**\n\n时间复杂度：$O(\\max(m, n))$，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复 $\\max(m, n)$ 次。\n\n空间复杂度：$O(\\max(m, n))$， 新列表的长度最多为 $\\max(m,n)$。\n\n***\n\n### 3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)\n\n给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n**示例 1**\n\n    输入: \"abcabcbb\"\n    输出: 3 \n    解释: 无重复字符的最长子串是 \"abc\"，其长度为 3。\n    \n**示例 2**\n\n    输入: \"bbbbb\"\n    输出: 1\n    解释: 无重复字符的最长子串是 \"b\"，其长度为 1。\n    \n**示例 3**\n\n    输入: \"pwwkew\"\n    输出: 3\n    解释: 无重复字符的最长子串是 \"wke\"，其长度为 3。\n         请注意，答案必须是一个子串，\"pwke\" 是一个子序列 而不是子串。\n         \n> 这道题想了半个小时除了暴力遍历法没有想到别的思路遂放弃\n\n**推荐解决方案**\n**滑动窗口**\n**算法**\n\n在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引$i$到$j - 1$之间的子字符串$s_{ij}$已经被检查为没有重复字符。\n我们只需要检查$s[j]$对应的字符是否已经存在于子字符串$s_{ij}$中。\n\n要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为$O(n^2)$的算法，但我们可以做得更好。\n\n通过使用 ``HashSet`` 作为滑动窗口，我们可以用$O(1)$的时间来完成对字符是否在当前的子字符串中的检查。\n\n滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 $[i, j)$（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 $[i, j)$ 向右滑动 11 个元素，则它将变为 $[i+1, j+1)$（左闭，右开）。\n\n回到我们的问题，我们使用 ``HashSet`` 将字符存储在当前窗口 $[i, j)$（最初 j = ij=i）中。 然后我们向右侧滑动索引 j，如果它不在 ``HashSet`` 中，我们会继续滑动 j。直到 $s[j]$ 已经存在于 ``HashSet`` 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 i 这样做，就可以得到答案。\n\n    public class Solution {\n        public int lengthOfLongestSubstring(String s) {\n            int n = s.length();\n            Set<Character> set = new HashSet<>();\n            int ans = 0, i = 0, j = 0;\n            while (i < n && j < n) {\n                // try to extend the range [i, j]\n                if (!set.contains(s.charAt(j))){\n                    set.add(s.charAt(j++));\n                    ans = Math.max(ans, j - i);\n                }\n                else {\n                    set.remove(s.charAt(i++));\n                }\n            }\n            return ans;\n        }\n    }\n\n**复杂度分析**\n\n* 时间复杂度：$O(2n) = O(n)$，在最糟糕的情况下，每个字符将被 i 和 j 访问两次。\n\n* 空间复杂度：$O(min(m, n))$，与之前的方法相同。滑动窗口法需要 $O(k)$ 的空间，其中 k 表示 ``Set`` 的大小。而Set的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。 \n\n**优化的滑动窗口**\n**算法**\n\n上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。\n\n也就是说，如果 $s[j]$ 在 $[i, j)$ 范围内有与 $j'$重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 $[𝑖，𝑗′]$ 范围内的所有元素，并将 i 变为 $j' + 1$。\n\n    public class Solution {\n        public int lengthOfLongestSubstring(String s) {\n            int n = s.length(), ans = 0;\n            Map<Character, Integer> map = new HashMap<>(); // current index of character\n            // try to extend the range [i, j]\n            for (int j = 0, i = 0; j < n; j++) {\n                if (map.containsKey(s.charAt(j))) {\n                    i = Math.max(map.get(s.charAt(j)), i);\n                }\n                ans = Math.max(ans, j - i + 1);\n                map.put(s.charAt(j), j + 1);\n            }\n            return ans;\n        }\n    }\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，索引 j 将会迭代 n 次。\n\n* 空间复杂度（``HashMap``）：$O(min(m, n))$，与之前的方法相同。\n\n***\n\n### 题目二 - 输入有序数组\n\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n\n***说明:***\n\n* 返回的下标值（index1 和 index2）不是从零开始的。\n* 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n***示例:***\n    \n    输入: numbers = [2, 7, 11, 15], target = 9\n    输出: [1,2]\n    解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n    \n\n#### 我的解法：\n\n    \n    class Solution {\n        public int[] twoSum(int[] numbers, int target) {\n            Map<Integer, Integer> map = new HashMap<>();\n            for(int i = 0;i < numbers.length;i ++){\n                int tmp = target - numbers[i];\n                if(map.containsKey(tmp) && map.get(tmp) < i){\n                    return new int[]{map.get(tmp)+1, i+1};\n                }\n                map.put(numbers[i], i);\n            }\n            return null;\n        }\n    }\n    \n\n#### 耗时最短的解法：\n    \n    class Solution {\n        public int[] twoSum(int[] numbers, int target) {\n            int[] result=new int[2];\n            int i,j;\n            for(i=0,j=numbers.length-1;i<j;)\n            {\n                if(numbers[i]+numbers[j]>target){\n                    j--;\n                }else if(numbers[i]+numbers[j]<target){\n                    i++;\n                }else break;\n            }\n            result[0]=i+1;\n            result[1]=j+1;\n            return result;\n        }\n    }\n    \n***\n\n### 7.反转整数(Reverse Integer)\n\n给定一个 32 位有符号整数，将整数中的数字进行反转。\n\n**示例 1:**\n    \n    输入: 123\n    输出: 321\n    \n**示例 2:**\n    \n    输入: -123\n    输出: -321\n    \n**示例 3:**\n    \n    输入: 120\n    输出: 21\n    \n***注意:***\n\n假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。\n\n#### 我的解法：\n    \n    class Solution {\n        public int reverse(int x) {\n            StringBuilder sb = new StringBuilder(\"\");\n            String str = x+\"\";\n            if(x < 0){\n                sb.append(\"-\");\n                str = str.substring(1);\n            }\n            for(int i = str.length()-1;i >=0;i--){\n                if(i == str.length()-1 && i !=0 && String.valueOf(str.charAt(i)).equals(\"0\")){\n                    continue;\n                }\n                sb.append(str.charAt(i));\n            }\n            Integer i = null;\n            try {\n                i = Integer.valueOf(sb.toString());\n            } catch (NumberFormatException e) {\n                return 0;\n            }\n    \n            return i.intValue();\n        }\n    }\n    \n#### 耗时最短的解法：\n    \n    class Solution {\n        public int reverse(int x) {\n            int next = x;\n            /*\n             pop:反转数——余数\n              */\n            int pop = 0;\n            int result = 0;\n            do {\n                pop = next % 10;\n                next /= 10;\n                // 判断是否溢出\n    \n                // MIN: -2147483648\n                if (result < Integer.MIN_VALUE / 10 || result * 10 == Integer.MAX_VALUE && pop < -8) {\n                    return 0;\n                }\n                // MAX:  2147483647\n                if (result > Integer.MAX_VALUE /10 || result * 10 == Integer.MAX_VALUE && pop > 7) {\n                    return 0;\n                }\n                result = result * 10 + pop;\n            }\n            while (next != 0);\n            return result;\n        }\n    }\n    \n***\n\n### 9.回文数(Palindrome Number)\n\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n***示例 1:***\n\n    输入: 121\n    输出: true\n\n***示例 2:***\n\n    输入: -121\n    输出: false\n    解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\n***示例 3:***\n\n    输入: 10\n    输出: false\n    解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n***示例:***\n    \n  给定 nums = [2, 7, 11, 15], target = 9\n  \n  因为 nums[0] + nums[1] = 2 + 7 = 9\n  所以返回 [0, 1]\n    \n***进阶:***\n\n你能不将整数转为字符串来解决这个问题吗？\n\n#### 我的解法：\n\n    \n    class Solution {\n        public boolean isPalindrome(int x) {\n            if(x < 0 || String.valueOf(x).equals(\"-0\")){\n                return false;\n            }\n            String str = String.valueOf(x);\n            int i,j;\n            for(i = 0,j = str.length()-1;i <= j;){\n                if(str.charAt(i) == str.charAt(j)){\n                    i++;\n                    j--;\n                }else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n[官方解决方法](https://leetcode-cn.com/articles/palindrome-number/)\n\n***","slug":"leet-code-刷题","published":1,"updated":"2018-08-21T11:15:05.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqtl3jb0000o4sapegexjbe","content":"<h3 id=\"1-两数之和-Two-Sum\"><a href=\"#1-两数之和-Two-Sum\" class=\"headerlink\" title=\"1.两数之和(Two Sum)\"></a>1.两数之和(Two Sum)</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p>\n<p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>\n<p><strong>示例</strong></p>\n<pre><code>给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n</code></pre><p><strong>我的解法</strong></p>\n<pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] result = null;\n        for(int i = 0;i &lt; nums.length;i ++){\n            if(result != null &amp;&amp; result.length == 2){\n                break;\n            }\n            for(int j = 0;j &lt; nums.length;j ++) {\n                if(j == i){\n                    continue;\n                }\n                if((nums[i] + nums[j]) == target){\n                    result = new int[]{i, j};\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n</code></pre><p><strong>优解</strong></p>\n<p>遍历一次，在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<pre><code>public int[] twoSum(int[] nums, int target) {\n    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n    for (int i = 0; i &lt; nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(&quot;No two sum solution&quot;);\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<p>时间复杂度：$O(n)$， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费$O(1)$的时间。</p>\n<p>空间复杂度：$O(n)$， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。</p>\n<hr>\n<h3 id=\"2-两数相加-Add-Two-Numbers\"><a href=\"#2-两数相加-Add-Two-Numbers\" class=\"headerlink\" title=\"2. 两数相加(Add Two Numbers)\"></a>2. 两数相加(Add Two Numbers)</h3><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n<p><strong>示例</strong></p>\n<pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n输出：7 -&gt; 0 -&gt; 8\n原因：342 + 465 = 807\n</code></pre><p><strong>我的解法</strong></p>\n<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode resultNode = null;\n        ListNode tmpNode = null;\n        int sum = 0;\n        int tmp;\n        do {\n            if(l1 != null){\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if(l2 != null){\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            ListNode nextNode = new ListNode(sum%10);\n            tmp = sum/10;\n            sum = tmp;\n            if(tmpNode == null){\n                resultNode = nextNode;\n            }else {\n                tmpNode.next = nextNode;\n            }\n            tmpNode = nextNode;\n        }\n        while (l1 != null || l2 != null);\n        if(tmp != 0){\n            tmpNode.next = new ListNode(tmp);\n        }\n        return resultNode;\n    }\n}\n</code></pre><p><strong>优解</strong></p>\n<pre><code>public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry &gt; 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<p>时间复杂度：$O(\\max(m, n))$，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复 $\\max(m, n)$ 次。</p>\n<p>空间复杂度：$O(\\max(m, n))$， 新列表的长度最多为 $\\max(m,n)$。</p>\n<hr>\n<h3 id=\"3-无重复字符的最长子串-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-无重复字符的最长子串-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)\"></a>3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)</h3><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>\n<p><strong>示例 1</strong></p>\n<pre><code>输入: &quot;abcabcbb&quot;\n输出: 3 \n解释: 无重复字符的最长子串是 &quot;abc&quot;，其长度为 3。\n</code></pre><p><strong>示例 2</strong></p>\n<pre><code>输入: &quot;bbbbb&quot;\n输出: 1\n解释: 无重复字符的最长子串是 &quot;b&quot;，其长度为 1。\n</code></pre><p><strong>示例 3</strong></p>\n<pre><code>输入: &quot;pwwkew&quot;\n输出: 3\n解释: 无重复字符的最长子串是 &quot;wke&quot;，其长度为 3。\n     请注意，答案必须是一个子串，&quot;pwke&quot; 是一个子序列 而不是子串。\n</code></pre><blockquote>\n<p>这道题想了半个小时除了暴力遍历法没有想到别的思路遂放弃</p>\n</blockquote>\n<p><strong>推荐解决方案</strong><br><strong>滑动窗口</strong><br><strong>算法</strong></p>\n<p>在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引$i$到$j - 1$之间的子字符串$s_{ij}$已经被检查为没有重复字符。<br>我们只需要检查$s[j]$对应的字符是否已经存在于子字符串$s_{ij}$中。</p>\n<p>要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为$O(n^2)$的算法，但我们可以做得更好。</p>\n<p>通过使用 <code>HashSet</code> 作为滑动窗口，我们可以用$O(1)$的时间来完成对字符是否在当前的子字符串中的检查。</p>\n<p>滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 $[i, j)$（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 $[i, j)$ 向右滑动 11 个元素，则它将变为 $[i+1, j+1)$（左闭，右开）。</p>\n<p>回到我们的问题，我们使用 <code>HashSet</code> 将字符存储在当前窗口 $[i, j)$（最初 j = ij=i）中。 然后我们向右侧滑动索引 j，如果它不在 <code>HashSet</code> 中，我们会继续滑动 j。直到 $s[j]$ 已经存在于 <code>HashSet</code> 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 i 这样做，就可以得到答案。</p>\n<pre><code>public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set&lt;Character&gt; set = new HashSet&lt;&gt;();\n        int ans = 0, i = 0, j = 0;\n        while (i &lt; n &amp;&amp; j &lt; n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<ul>\n<li><p>时间复杂度：$O(2n) = O(n)$，在最糟糕的情况下，每个字符将被 i 和 j 访问两次。</p>\n</li>\n<li><p>空间复杂度：$O(min(m, n))$，与之前的方法相同。滑动窗口法需要 $O(k)$ 的空间，其中 k 表示 <code>Set</code> 的大小。而Set的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。 </p>\n</li>\n</ul>\n<p><strong>优化的滑动窗口</strong><br><strong>算法</strong></p>\n<p>上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。</p>\n<p>也就是说，如果 $s[j]$ 在 $[i, j)$ 范围内有与 $j’$重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 $[𝑖，𝑗′]$ 范围内的所有元素，并将 i 变为 $j’ + 1$。</p>\n<pre><code>public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j &lt; n; j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            ans = Math.max(ans, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return ans;\n    }\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<ul>\n<li><p>时间复杂度：$O(n)$，索引 j 将会迭代 n 次。</p>\n</li>\n<li><p>空间复杂度（<code>HashMap</code>）：$O(min(m, n))$，与之前的方法相同。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"题目二-输入有序数组\"><a href=\"#题目二-输入有序数组\" class=\"headerlink\" title=\"题目二 - 输入有序数组\"></a>题目二 - 输入有序数组</h3><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<p><strong><em>说明:</em></strong></p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<p><strong><em>示例:</em></strong></p>\n<pre><code>输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n</code></pre><h4 id=\"我的解法：\"><a href=\"#我的解法：\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for(int i = 0;i &lt; numbers.length;i ++){\n            int tmp = target - numbers[i];\n            if(map.containsKey(tmp) &amp;&amp; map.get(tmp) &lt; i){\n                return new int[]{map.get(tmp)+1, i+1};\n            }\n            map.put(numbers[i], i);\n        }\n        return null;\n    }\n}\n</code></pre><h4 id=\"耗时最短的解法：\"><a href=\"#耗时最短的解法：\" class=\"headerlink\" title=\"耗时最短的解法：\"></a>耗时最短的解法：</h4><pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int[] result=new int[2];\n        int i,j;\n        for(i=0,j=numbers.length-1;i&lt;j;)\n        {\n            if(numbers[i]+numbers[j]&gt;target){\n                j--;\n            }else if(numbers[i]+numbers[j]&lt;target){\n                i++;\n            }else break;\n        }\n        result[0]=i+1;\n        result[1]=j+1;\n        return result;\n    }\n}\n</code></pre><hr>\n<h3 id=\"7-反转整数-Reverse-Integer\"><a href=\"#7-反转整数-Reverse-Integer\" class=\"headerlink\" title=\"7.反转整数(Reverse Integer)\"></a>7.反转整数(Reverse Integer)</h3><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: 123\n输出: 321\n</code></pre><p><strong>示例 2:</strong></p>\n<pre><code>输入: -123\n输出: -321\n</code></pre><p><strong>示例 3:</strong></p>\n<pre><code>输入: 120\n输出: 21\n</code></pre><p><strong><em>注意:</em></strong></p>\n<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p>\n<h4 id=\"我的解法：-1\"><a href=\"#我的解法：-1\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public int reverse(int x) {\n        StringBuilder sb = new StringBuilder(&quot;&quot;);\n        String str = x+&quot;&quot;;\n        if(x &lt; 0){\n            sb.append(&quot;-&quot;);\n            str = str.substring(1);\n        }\n        for(int i = str.length()-1;i &gt;=0;i--){\n            if(i == str.length()-1 &amp;&amp; i !=0 &amp;&amp; String.valueOf(str.charAt(i)).equals(&quot;0&quot;)){\n                continue;\n            }\n            sb.append(str.charAt(i));\n        }\n        Integer i = null;\n        try {\n            i = Integer.valueOf(sb.toString());\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        return i.intValue();\n    }\n}\n</code></pre><h4 id=\"耗时最短的解法：-1\"><a href=\"#耗时最短的解法：-1\" class=\"headerlink\" title=\"耗时最短的解法：\"></a>耗时最短的解法：</h4><pre><code>class Solution {\n    public int reverse(int x) {\n        int next = x;\n        /*\n         pop:反转数——余数\n          */\n        int pop = 0;\n        int result = 0;\n        do {\n            pop = next % 10;\n            next /= 10;\n            // 判断是否溢出\n\n            // MIN: -2147483648\n            if (result &lt; Integer.MIN_VALUE / 10 || result * 10 == Integer.MAX_VALUE &amp;&amp; pop &lt; -8) {\n                return 0;\n            }\n            // MAX:  2147483647\n            if (result &gt; Integer.MAX_VALUE /10 || result * 10 == Integer.MAX_VALUE &amp;&amp; pop &gt; 7) {\n                return 0;\n            }\n            result = result * 10 + pop;\n        }\n        while (next != 0);\n        return result;\n    }\n}\n</code></pre><hr>\n<h3 id=\"9-回文数-Palindrome-Number\"><a href=\"#9-回文数-Palindrome-Number\" class=\"headerlink\" title=\"9.回文数(Palindrome Number)\"></a>9.回文数(Palindrome Number)</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p><strong><em>示例 1:</em></strong></p>\n<pre><code>输入: 121\n输出: true\n</code></pre><p><strong><em>示例 2:</em></strong></p>\n<pre><code>输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</code></pre><p><strong><em>示例 3:</em></strong></p>\n<pre><code>输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n</code></pre><p><strong><em>示例:</em></strong></p>\n<p>  给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>  因为 nums[0] + nums[1] = 2 + 7 = 9<br>  所以返回 [0, 1]</p>\n<p><strong><em>进阶:</em></strong></p>\n<p>你能不将整数转为字符串来解决这个问题吗？</p>\n<h4 id=\"我的解法：-2\"><a href=\"#我的解法：-2\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public boolean isPalindrome(int x) {\n        if(x &lt; 0 || String.valueOf(x).equals(&quot;-0&quot;)){\n            return false;\n        }\n        String str = String.valueOf(x);\n        int i,j;\n        for(i = 0,j = str.length()-1;i &lt;= j;){\n            if(str.charAt(i) == str.charAt(j)){\n                i++;\n                j--;\n            }else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre><p><a href=\"https://leetcode-cn.com/articles/palindrome-number/\" target=\"_blank\" rel=\"noopener\">官方解决方法</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-两数之和-Two-Sum\"><a href=\"#1-两数之和-Two-Sum\" class=\"headerlink\" title=\"1.两数之和(Two Sum)\"></a>1.两数之和(Two Sum)</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p>\n<p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>\n<p><strong>示例</strong></p>\n<pre><code>给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n</code></pre><p><strong>我的解法</strong></p>\n<pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] result = null;\n        for(int i = 0;i &lt; nums.length;i ++){\n            if(result != null &amp;&amp; result.length == 2){\n                break;\n            }\n            for(int j = 0;j &lt; nums.length;j ++) {\n                if(j == i){\n                    continue;\n                }\n                if((nums[i] + nums[j]) == target){\n                    result = new int[]{i, j};\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n</code></pre><p><strong>优解</strong></p>\n<p>遍历一次，在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<pre><code>public int[] twoSum(int[] nums, int target) {\n    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n    for (int i = 0; i &lt; nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(&quot;No two sum solution&quot;);\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<p>时间复杂度：$O(n)$， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费$O(1)$的时间。</p>\n<p>空间复杂度：$O(n)$， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。</p>\n<hr>\n<h3 id=\"2-两数相加-Add-Two-Numbers\"><a href=\"#2-两数相加-Add-Two-Numbers\" class=\"headerlink\" title=\"2. 两数相加(Add Two Numbers)\"></a>2. 两数相加(Add Two Numbers)</h3><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n<p><strong>示例</strong></p>\n<pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n输出：7 -&gt; 0 -&gt; 8\n原因：342 + 465 = 807\n</code></pre><p><strong>我的解法</strong></p>\n<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode resultNode = null;\n        ListNode tmpNode = null;\n        int sum = 0;\n        int tmp;\n        do {\n            if(l1 != null){\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if(l2 != null){\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            ListNode nextNode = new ListNode(sum%10);\n            tmp = sum/10;\n            sum = tmp;\n            if(tmpNode == null){\n                resultNode = nextNode;\n            }else {\n                tmpNode.next = nextNode;\n            }\n            tmpNode = nextNode;\n        }\n        while (l1 != null || l2 != null);\n        if(tmp != 0){\n            tmpNode.next = new ListNode(tmp);\n        }\n        return resultNode;\n    }\n}\n</code></pre><p><strong>优解</strong></p>\n<pre><code>public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry &gt; 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<p>时间复杂度：$O(\\max(m, n))$，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复 $\\max(m, n)$ 次。</p>\n<p>空间复杂度：$O(\\max(m, n))$， 新列表的长度最多为 $\\max(m,n)$。</p>\n<hr>\n<h3 id=\"3-无重复字符的最长子串-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-无重复字符的最长子串-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)\"></a>3. 无重复字符的最长子串(Longest Substring Without Repeating Characters)</h3><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>\n<p><strong>示例 1</strong></p>\n<pre><code>输入: &quot;abcabcbb&quot;\n输出: 3 \n解释: 无重复字符的最长子串是 &quot;abc&quot;，其长度为 3。\n</code></pre><p><strong>示例 2</strong></p>\n<pre><code>输入: &quot;bbbbb&quot;\n输出: 1\n解释: 无重复字符的最长子串是 &quot;b&quot;，其长度为 1。\n</code></pre><p><strong>示例 3</strong></p>\n<pre><code>输入: &quot;pwwkew&quot;\n输出: 3\n解释: 无重复字符的最长子串是 &quot;wke&quot;，其长度为 3。\n     请注意，答案必须是一个子串，&quot;pwke&quot; 是一个子序列 而不是子串。\n</code></pre><blockquote>\n<p>这道题想了半个小时除了暴力遍历法没有想到别的思路遂放弃</p>\n</blockquote>\n<p><strong>推荐解决方案</strong><br><strong>滑动窗口</strong><br><strong>算法</strong></p>\n<p>在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引$i$到$j - 1$之间的子字符串$s_{ij}$已经被检查为没有重复字符。<br>我们只需要检查$s[j]$对应的字符是否已经存在于子字符串$s_{ij}$中。</p>\n<p>要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为$O(n^2)$的算法，但我们可以做得更好。</p>\n<p>通过使用 <code>HashSet</code> 作为滑动窗口，我们可以用$O(1)$的时间来完成对字符是否在当前的子字符串中的检查。</p>\n<p>滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 $[i, j)$（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 $[i, j)$ 向右滑动 11 个元素，则它将变为 $[i+1, j+1)$（左闭，右开）。</p>\n<p>回到我们的问题，我们使用 <code>HashSet</code> 将字符存储在当前窗口 $[i, j)$（最初 j = ij=i）中。 然后我们向右侧滑动索引 j，如果它不在 <code>HashSet</code> 中，我们会继续滑动 j。直到 $s[j]$ 已经存在于 <code>HashSet</code> 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 i 这样做，就可以得到答案。</p>\n<pre><code>public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set&lt;Character&gt; set = new HashSet&lt;&gt;();\n        int ans = 0, i = 0, j = 0;\n        while (i &lt; n &amp;&amp; j &lt; n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<ul>\n<li><p>时间复杂度：$O(2n) = O(n)$，在最糟糕的情况下，每个字符将被 i 和 j 访问两次。</p>\n</li>\n<li><p>空间复杂度：$O(min(m, n))$，与之前的方法相同。滑动窗口法需要 $O(k)$ 的空间，其中 k 表示 <code>Set</code> 的大小。而Set的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。 </p>\n</li>\n</ul>\n<p><strong>优化的滑动窗口</strong><br><strong>算法</strong></p>\n<p>上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。</p>\n<p>也就是说，如果 $s[j]$ 在 $[i, j)$ 范围内有与 $j’$重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 $[𝑖，𝑗′]$ 范围内的所有元素，并将 i 变为 $j’ + 1$。</p>\n<pre><code>public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j &lt; n; j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            ans = Math.max(ans, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return ans;\n    }\n}\n</code></pre><p><strong>复杂度分析</strong></p>\n<ul>\n<li><p>时间复杂度：$O(n)$，索引 j 将会迭代 n 次。</p>\n</li>\n<li><p>空间复杂度（<code>HashMap</code>）：$O(min(m, n))$，与之前的方法相同。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"题目二-输入有序数组\"><a href=\"#题目二-输入有序数组\" class=\"headerlink\" title=\"题目二 - 输入有序数组\"></a>题目二 - 输入有序数组</h3><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<p><strong><em>说明:</em></strong></p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<p><strong><em>示例:</em></strong></p>\n<pre><code>输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n</code></pre><h4 id=\"我的解法：\"><a href=\"#我的解法：\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for(int i = 0;i &lt; numbers.length;i ++){\n            int tmp = target - numbers[i];\n            if(map.containsKey(tmp) &amp;&amp; map.get(tmp) &lt; i){\n                return new int[]{map.get(tmp)+1, i+1};\n            }\n            map.put(numbers[i], i);\n        }\n        return null;\n    }\n}\n</code></pre><h4 id=\"耗时最短的解法：\"><a href=\"#耗时最短的解法：\" class=\"headerlink\" title=\"耗时最短的解法：\"></a>耗时最短的解法：</h4><pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int[] result=new int[2];\n        int i,j;\n        for(i=0,j=numbers.length-1;i&lt;j;)\n        {\n            if(numbers[i]+numbers[j]&gt;target){\n                j--;\n            }else if(numbers[i]+numbers[j]&lt;target){\n                i++;\n            }else break;\n        }\n        result[0]=i+1;\n        result[1]=j+1;\n        return result;\n    }\n}\n</code></pre><hr>\n<h3 id=\"7-反转整数-Reverse-Integer\"><a href=\"#7-反转整数-Reverse-Integer\" class=\"headerlink\" title=\"7.反转整数(Reverse Integer)\"></a>7.反转整数(Reverse Integer)</h3><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: 123\n输出: 321\n</code></pre><p><strong>示例 2:</strong></p>\n<pre><code>输入: -123\n输出: -321\n</code></pre><p><strong>示例 3:</strong></p>\n<pre><code>输入: 120\n输出: 21\n</code></pre><p><strong><em>注意:</em></strong></p>\n<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p>\n<h4 id=\"我的解法：-1\"><a href=\"#我的解法：-1\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public int reverse(int x) {\n        StringBuilder sb = new StringBuilder(&quot;&quot;);\n        String str = x+&quot;&quot;;\n        if(x &lt; 0){\n            sb.append(&quot;-&quot;);\n            str = str.substring(1);\n        }\n        for(int i = str.length()-1;i &gt;=0;i--){\n            if(i == str.length()-1 &amp;&amp; i !=0 &amp;&amp; String.valueOf(str.charAt(i)).equals(&quot;0&quot;)){\n                continue;\n            }\n            sb.append(str.charAt(i));\n        }\n        Integer i = null;\n        try {\n            i = Integer.valueOf(sb.toString());\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        return i.intValue();\n    }\n}\n</code></pre><h4 id=\"耗时最短的解法：-1\"><a href=\"#耗时最短的解法：-1\" class=\"headerlink\" title=\"耗时最短的解法：\"></a>耗时最短的解法：</h4><pre><code>class Solution {\n    public int reverse(int x) {\n        int next = x;\n        /*\n         pop:反转数——余数\n          */\n        int pop = 0;\n        int result = 0;\n        do {\n            pop = next % 10;\n            next /= 10;\n            // 判断是否溢出\n\n            // MIN: -2147483648\n            if (result &lt; Integer.MIN_VALUE / 10 || result * 10 == Integer.MAX_VALUE &amp;&amp; pop &lt; -8) {\n                return 0;\n            }\n            // MAX:  2147483647\n            if (result &gt; Integer.MAX_VALUE /10 || result * 10 == Integer.MAX_VALUE &amp;&amp; pop &gt; 7) {\n                return 0;\n            }\n            result = result * 10 + pop;\n        }\n        while (next != 0);\n        return result;\n    }\n}\n</code></pre><hr>\n<h3 id=\"9-回文数-Palindrome-Number\"><a href=\"#9-回文数-Palindrome-Number\" class=\"headerlink\" title=\"9.回文数(Palindrome Number)\"></a>9.回文数(Palindrome Number)</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p><strong><em>示例 1:</em></strong></p>\n<pre><code>输入: 121\n输出: true\n</code></pre><p><strong><em>示例 2:</em></strong></p>\n<pre><code>输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</code></pre><p><strong><em>示例 3:</em></strong></p>\n<pre><code>输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n</code></pre><p><strong><em>示例:</em></strong></p>\n<p>  给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>  因为 nums[0] + nums[1] = 2 + 7 = 9<br>  所以返回 [0, 1]</p>\n<p><strong><em>进阶:</em></strong></p>\n<p>你能不将整数转为字符串来解决这个问题吗？</p>\n<h4 id=\"我的解法：-2\"><a href=\"#我的解法：-2\" class=\"headerlink\" title=\"我的解法：\"></a>我的解法：</h4><pre><code>class Solution {\n    public boolean isPalindrome(int x) {\n        if(x &lt; 0 || String.valueOf(x).equals(&quot;-0&quot;)){\n            return false;\n        }\n        String str = String.valueOf(x);\n        int i,j;\n        for(i = 0,j = str.length()-1;i &lt;= j;){\n            if(str.charAt(i) == str.charAt(j)){\n                i++;\n                j--;\n            }else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre><p><a href=\"https://leetcode-cn.com/articles/palindrome-number/\" target=\"_blank\" rel=\"noopener\">官方解决方法</a></p>\n<hr>\n"},{"title":"时间慌","date":"2018-08-17T06:14:27.000Z","mathjax":false,"_content":"\n随着媳妇儿的坚持（其实我也不知道她坚持要买的理由是啥），就在狗东入了ps4 pro，然后在淘宝另购入一个手柄。\n","source":"_posts/时间慌.md","raw":"---\ntitle: 时间慌\ndate: 2018-08-17 14:14:27\ntags: [吐槽]\ncategory: 生活\nmathjax: false\n---\n\n随着媳妇儿的坚持（其实我也不知道她坚持要买的理由是啥），就在狗东入了ps4 pro，然后在淘宝另购入一个手柄。\n","slug":"时间慌","published":1,"updated":"2018-08-21T06:54:01.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqtl3jg0001o4sa7q8rvitz","content":"<p>随着媳妇儿的坚持（其实我也不知道她坚持要买的理由是啥），就在狗东入了ps4 pro，然后在淘宝另购入一个手柄。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着媳妇儿的坚持（其实我也不知道她坚持要买的理由是啥），就在狗东入了ps4 pro，然后在淘宝另购入一个手柄。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtqtl3jb0000o4sapegexjbe","category_id":"cjtqtl3ji0002o4sa4e04botg","_id":"cjtqtl3jn0006o4sagknvvpmu"},{"post_id":"cjtqtl3jg0001o4sa7q8rvitz","category_id":"cjtqtl3jm0004o4sanfbtrrsj","_id":"cjtqtl3jq0008o4sa9cph0hkn"}],"PostTag":[{"post_id":"cjtqtl3jb0000o4sapegexjbe","tag_id":"cjtqtl3jk0003o4saalwili0d","_id":"cjtqtl3jq000ao4sa505xataj"},{"post_id":"cjtqtl3jb0000o4sapegexjbe","tag_id":"cjtqtl3jm0005o4sajuj7mpj8","_id":"cjtqtl3jr000bo4sau4novgsu"},{"post_id":"cjtqtl3jb0000o4sapegexjbe","tag_id":"cjtqtl3jn0007o4sapkivlip8","_id":"cjtqtl3jr000co4samlzeutus"},{"post_id":"cjtqtl3jg0001o4sa7q8rvitz","tag_id":"cjtqtl3jq0009o4sa4d4x0oei","_id":"cjtqtl3jr000do4sa0nl6o209"}],"Tag":[{"name":"技术","_id":"cjtqtl3jk0003o4saalwili0d"},{"name":"算法","_id":"cjtqtl3jm0005o4sajuj7mpj8"},{"name":"简单","_id":"cjtqtl3jn0007o4sapkivlip8"},{"name":"吐槽","_id":"cjtqtl3jq0009o4sa4d4x0oei"}]}}